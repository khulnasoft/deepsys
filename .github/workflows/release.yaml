name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Building release for version: $VERSION"

    - name: Build release packages
      run: |
        mkdir -p build dist
        cd build

        # Configure for release build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DBUILD_TESTS=OFF \
              ..

        # Build all components
        make -j$(nproc)

        # Create installation packages
        cpack -G TGZ
        cpack -G DEB
        cpack -G RPM

    - name: Generate changelog
      run: |
        # Generate changelog from git history
        git log --oneline --since="1 month ago" > CHANGELOG.md || echo "No recent changes" > CHANGELOG.md

    - name: Create release archives
      run: |
        # Create source archive
        git archive --format=tar.gz -o dist/deepsys-${{ env.VERSION }}-src.tar.gz HEAD

        # Copy binary packages
        cp build/*.tar.gz dist/ 2>/dev/null || true
        cp build/*.deb dist/ 2>/dev/null || true
        cp build/*.rpm dist/ 2>/dev/null || true

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/deepsys-${{ env.VERSION }}-src.tar.gz
          dist/*.tar.gz
          dist/*.deb
          dist/*.rpm
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    name: Publish to Package Registries
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-packages
        path: dist/

    - name: Publish to GitHub Packages
      run: |
        # This would publish to GitHub Packages registry
        # Implementation depends on package registry setup
        echo "Publishing to GitHub Packages registry"
        # gh api repos/${{ github.repository }}/packages \
        #   -f package_type=container \
        #   -f name=deepsys \
        #   -f description="DeepSys modular system monitoring tool"

    - name: Publish to Docker Hub
      if: env.DOCKER_HUB_TOKEN != ''
      run: |
        # Build and publish Docker images
        echo "Publishing Docker images to Docker Hub"
        # docker build -t deepsys/deepsys:${{ env.VERSION }} .
        # docker tag deepsys/deepsys:${{ env.VERSION }} deepsys/deepsys:latest
        # docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN
        # docker push deepsys/deepsys:${{ env.VERSION }}
        # docker push deepsys/deepsys:latest

    - name: Notify package repositories
      run: |
        # This could trigger updates to package repositories
        echo "Notifying package repository maintainers"
        # Implementation depends on package repository setup
